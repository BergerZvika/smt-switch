(set-logic UFNIA)
(declare-fun bvand (Int Int Int) Int)
(set-option :produce-models true)
(declare-const k Int)
(declare-const _pbv_s Int)
(declare-const _pbv_t Int)

(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (and (=> (not (< (- (* 2 (mod _pbv_s (^ 2 (- k 1)))) _pbv_s) (- (* 2 (mod (bvand k _pbv_s _pbv_t) (^ 2 (- k 1)))) (bvand k _pbv_s _pbv_t)))) (exists ((_pbv_x__param_0 Int)) (and (>= _pbv_x__param_0 0) (< _pbv_x__param_0 (^ 2 k)) (>= (- (* 2 (mod (- (+ _pbv_x__param_0 _pbv_s) (bvand k _pbv_x__param_0 _pbv_s)) (^ 2 (- k 1)))) (- (+ _pbv_x__param_0 _pbv_s) (bvand k _pbv_x__param_0 _pbv_s))) (- (* 2 (mod _pbv_t (^ 2 (- k 1)))) _pbv_t))))) (=> (exists ((_pbv_x__param_0 Int)) (and (>= _pbv_x__param_0 0) (< _pbv_x__param_0 (^ 2 k)) (>= (- (* 2 (mod (- (+ _pbv_x__param_0 _pbv_s) (bvand k _pbv_x__param_0 _pbv_s)) (^ 2 (- k 1)))) (- (+ _pbv_x__param_0 _pbv_s) (bvand k _pbv_x__param_0 _pbv_s))) (- (* 2 (mod _pbv_t (^ 2 (- k 1)))) _pbv_t)))) (not (< (- (* 2 (mod _pbv_s (^ 2 (- k 1)))) _pbv_s) (- (* 2 (mod (bvand k _pbv_s _pbv_t) (^ 2 (- k 1)))) (bvand k _pbv_s _pbv_t))))))) (>= _pbv_t 0)) (< _pbv_t (^ 2 k))) (>= _pbv_s 0)) (< _pbv_s (^ 2 k))) (forall ((x Int)) (forall ((y Int)) (=> (and (>= x 0) (>= y 0) (<= x 1) (<= y 1)) (= (bvand 1 x y) (ite (> (mod y 2) (mod x 2)) (mod x 2) (mod y 2))))))) (forall ((k Int)) (forall ((x Int)) (=> (and (> k 0) (>= x 0) (< x (^ 2 k))) (= (bvand k x (- (^ 2 k) 1)) x))))) (forall ((k Int)) (forall ((x Int)) (=> (and (> k 0) (>= x 0) (< x (^ 2 k))) (= (bvand k x 0) 0))))) (forall ((k Int)) (forall ((x Int)) (=> (and (> k 0) (>= x 0) (< x (^ 2 k))) (= (bvand k x x) x))))) (forall ((k Int)) (forall ((x Int)) (=> (and (> k 0) (>= x 0) (< x (^ 2 k))) (= (bvand k x (- (^ 2 k) (+ x 1))) 0))))) (forall ((k Int)) (forall ((x Int)) (forall ((y Int)) (=> (and (> k 0) (>= x 0) (< x (^ 2 k)) (>= y 0) (< y (^ 2 k))) (= (bvand k x y) (bvand k y x))))))) (forall ((k Int)) (forall ((x Int)) (forall ((y Int)) (forall ((z Int)) (=> (and (> k 0) (>= x 0) (< x (^ 2 k)) (>= y 0) (< y (^ 2 k)) (>= z 0) (< z (^ 2 k))) (=> (distinct x y) (or (distinct (bvand k x z) y) (distinct (bvand k y z) x))))))))) (forall ((k Int)) (forall ((x Int)) (forall ((y Int)) (=> (and (> k 0) (>= x 0) (< x (^ 2 k)) (>= y 0) (< y (^ 2 k))) (>= (bvand k x y) 0)))))) (forall ((k Int)) (forall ((x Int)) (forall ((y Int)) (=> (and (> k 0) (>= x 0) (< x (^ 2 k)) (>= y 0) (< y (^ 2 k))) (>= (ite (> x y) y x) (bvand k x y))))))) (and (> k 0) (= k k))))
(check-sat)
