(set-logic UFNIA)
(declare-fun bvand (Int Int Int) Int)
(declare-const k Int)
(declare-const _pbv_C1 Int)
(declare-const _pbv_%Z Int)
(declare-const _pbv_%RHS Int)
(declare-const _pbv_C2 Int)
(assert (and 
    (forall ((x Int)) (forall ((y Int)) (=> (and (>= x 0) (>= y 0) (<= x 1) (<= y 1)) (= (bvand 1 x y) (ite (> (mod y 2) (mod x 2)) (mod x 2) (mod y 2))))))
    (forall ((k Int)) (forall ((x Int)) (=> (and (> k 0) (>= x 0) (< x (^ 2 k))) (= (bvand k x (- (^ 2 k) 1)) x))))
    (forall ((k Int)) (forall ((x Int)) (=> (and (> k 0) (>= x 0) (< x (^ 2 k))) (= (bvand k x 0) 0))))
    (forall ((k Int)) (forall ((x Int)) (=> (and (> k 0) (>= x 0) (< x (^ 2 k))) (= (bvand k x x) x))))
    (forall ((k Int)) (forall ((x Int)) (=> (and (> k 0) (>= x 0) (< x (^ 2 k))) (= (bvand k x (- (^ 2 k) (+ x 1))) 0)))) 
    (forall ((k Int)) (forall ((x Int)) (forall ((y Int)) (=> (and (> k 0) (>= x 0) (< x (^ 2 k)) (>= y 0) (< y (^ 2 k))) (= (bvand k x y) (bvand k y x))))))
    (forall ((k Int)) (forall ((x Int)) (forall ((y Int)) (forall ((z Int)) (=> (and (> k 0) (>= x 0) (< x (^ 2 k)) (>= y 0) (< y (^ 2 k)) (>= z 0) (< z (^ 2 k))) 
            (=> (distinct x y) (or (distinct (bvand k x z) y) (distinct (bvand k y z) x))))))))
    (forall ((k Int)) (forall ((x Int)) (forall ((y Int)) (=> (and (> k 0) (>= x 0) (< x (^ 2 k)) (>= y 0) (< y (^ 2 k))) (>= (bvand k x y) 0)))))
    (forall ((k Int)) (forall ((x Int)) (forall ((y Int)) (=> (and (> k 0) (>= x 0) (< x (^ 2 k)) (>= y 0) (< y (^ 2 k))) (>= (ite (> x y) y x) (bvand k x y))))))
))
(check-sat)
