(set-logic UFNIA)
(declare-fun bvand (Int Int Int) Int)
(set-option :produce-models true)
(set-option :incremental true)
(declare-const k Int)
(declare-const m Int)
(declare-const r Int)
(declare-const _pbv_x Int)
(declare-const _pbv_y Int)
(declare-const _pbv_z Int)
(assert (and (and (and (= _pbv_x 0) (>= _pbv_x 0)) (< _pbv_x (^ 2 k))) (and (> k 0) (= k k))))
(assert (and (and (and (and (and (= (mod (+ _pbv_x _pbv_y) (^ 2 k)) _pbv_z) (>= _pbv_z 0)) (< _pbv_z (^ 2 k))) (>= _pbv_y 0)) (< _pbv_y (^ 2 k))) (and (> k 0) (= k k))))
(assert (and (distinct _pbv_y _pbv_z) (and (= k k) (> k 0))))
(check-sat)
(exit)
